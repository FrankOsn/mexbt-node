// Generated by CoffeeScript 1.9.0
(function() {
  var Mexbt, crypto, request,
    __slice = [].slice;

  request = require('request');

  crypto = require('crypto');

  Mexbt = (function() {
    Mexbt.prototype.publicEndpoint = "https://public-api.mexbt.com";

    Mexbt.prototype.privateEndpoint = null;

    function Mexbt(_at_key, _at_secret, _at_userId, options) {
      this.key = _at_key;
      this.secret = _at_secret;
      this.userId = _at_userId;
      if (options == null) {
        options = {};
      }
      this.privateEndpoint = "https://private-api" + ((options != null ? options.sandbox : void 0) != null ? '-sandbox' : '') + ".mexbt.com";
    }

    Mexbt.prototype.ticker = function() {
      var args, callback, params, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _ref = this._parseArgs(args), params = _ref[0], callback = _ref[1];
      params = this._mergeDefaultsAndRewrite(params, {
        pair: 'btcmxn'
      }, {
        pair: 'productPair'
      });
      return this._public('ticker', params, callback);
    };

    Mexbt.prototype.trades = function() {
      var args, callback, params, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _ref = this._parseArgs(args), params = _ref[0], callback = _ref[1];
      params = this._mergeDefaultsAndRewrite(params, {
        pair: 'btcmxn',
        startIndex: -1,
        count: 20
      }, {
        pair: 'ins'
      });
      return this._public('trades', params, callback);
    };

    Mexbt.prototype.tradesByDate = function(params, callback) {
      params = this._mergeDefaultsAndRewrite(params, {
        pair: 'btcmxn'
      }, {
        pair: 'ins'
      });
      return this._public('trades-by-date', params, callback);
    };

    Mexbt.prototype.orderBook = function() {
      var args, callback, params, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _ref = this._parseArgs(args), params = _ref[0], callback = _ref[1];
      params = this._mergeDefaultsAndRewrite(params, {
        pair: 'btcmxn'
      }, {
        pair: 'productPair'
      });
      return this._public('order-book', params, callback);
    };

    Mexbt.prototype.productPairs = function(callback) {
      return this._public('product-pairs', {}, callback);
    };

    Mexbt.prototype.accountInfo = function(callback) {
      return this._private('me', {}, callback);
    };

    Mexbt.prototype.accountBalance = function(callback) {
      return this._private('balance', {}, callback);
    };

    Mexbt.prototype.accountTrades = function() {
      var args, callback, params, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _ref = this._parseArgs(args), params = _ref[0], callback = _ref[1];
      params = this._mergeDefaultsAndRewrite(params, {
        pair: 'btcmxn',
        startIndex: -1,
        count: 20
      }, {
        pair: 'ins'
      });
      return this._private('trades', params, callback);
    };

    Mexbt.prototype.accountOrders = function(callback) {
      return this._private('orders', {}, callback);
    };

    Mexbt.prototype.accountDepositAddresses = function(callback) {
      return this._private('deposit-addresses', {}, callback);
    };

    Mexbt.prototype.withdraw = function(params, callback) {
      params = this._mergeDefaultsAndRewrite(params, {
        currency: 'btc'
      }, {
        currency: 'ins'
      });
      return this._private('withdraw', params, callback);
    };

    Mexbt.prototype.createOrder = function(params, callback) {
      params = this._mergeDefaultsAndRewrite(params, {
        pair: 'btcmxn',
        side: 'buy',
        orderType: 'market'
      }, {
        pair: 'ins',
        amount: 'qty',
        price: 'px'
      });
      if (params.orderType === 'market') {
        params.orderType = 1;
      } else {
        params.orderType = 0;
      }
      return this._private('orders/create', params, callback);
    };

    Mexbt.prototype.modifyOrder = function(params, callback) {
      params = this._mergeDefaultsAndRewrite(params, {
        pair: 'btcmxn'
      }, {
        id: 'serverOrderId',
        pair: 'ins',
        action: 'modifyAction'
      });
      switch (params.modifyAction) {
        case 'move_to_top':
          params.modifyAction = 0;
          break;
        case 'execute_now':
          params.modifyAction = 1;
          break;
        default:
          throw "You must specify an action parameter with either 'move_to_top' or 'execute_now'";
      }
      return this._private('orders/modify', params, callback);
    };

    Mexbt.prototype.cancelOrder = function(params, callback) {
      params = this._mergeDefaultsAndRewrite(params, {
        pair: 'btcmxn'
      }, {
        id: 'serverOrderId',
        pair: 'ins'
      });
      return this._private('orders/cancel', params, callback);
    };

    Mexbt.prototype.cancelAllOrders = function() {
      var args, callback, params, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _ref = this._parseArgs(args), params = _ref[0], callback = _ref[1];
      params = this._mergeDefaultsAndRewrite(params, {
        pair: 'btcmxn'
      }, {
        pair: 'ins'
      });
      return this._private('orders/cancel-all', params, callback);
    };

    Mexbt.prototype._private = function(path, params, callback) {
      var message, nonce, signature;
      nonce = (new Date()).getTime();
      message = "" + nonce + this.userId + this.key;
      signature = crypto.createHmac("sha256", this.secret).update(message).digest('hex').toUpperCase();
      params.apiKey = this.key;
      params.apiNonce = nonce;
      params.apiSig = signature;
      return this._call(this._url(this.privateEndpoint, path), params, callback);
    };

    Mexbt.prototype._public = function(path, params, callback) {
      return this._call(this._url(this.publicEndpoint, path), params, callback);
    };

    Mexbt.prototype._url = function(endpoint, path) {
      return endpoint + "/v1/" + path;
    };

    Mexbt.prototype._call = function(url, params, callback) {
      return request.post({
        url: url,
        json: true,
        body: params
      }, function(err, res, body) {
        if (err || !(body != null ? body.isAccepted : void 0)) {
          return callback(err || ("API Error: " + body.rejectReason));
        } else {
          return callback(null, body);
        }
      });
    };

    Mexbt.prototype._mergeDefaultsAndRewrite = function(params, defaults, rewriteInfo) {
      var key, value;
      for (key in defaults) {
        value = defaults[key];
        if (!params[key]) {
          params[key] = value;
        }
      }
      for (key in rewriteInfo) {
        value = rewriteInfo[key];
        params[value] = params[key];
        delete params[key];
      }
      return params;
    };

    Mexbt.prototype._parseArgs = function(args) {
      if (args[1]) {
        return args;
      } else {
        return [{}, args[0]];
      }
    };

    return Mexbt;

  })();

  module.exports = Mexbt;

}).call(this);
