// Generated by CoffeeScript 1.9.0
(function() {
  var RobustWebSocket, WebSocket,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  WebSocket = require('ws');

  RobustWebSocket = (function() {
    RobustWebSocket.prototype.socket = null;

    RobustWebSocket.prototype.pingTimer = null;

    RobustWebSocket.prototype.pingInterval = 60000;

    function RobustWebSocket(_at_endpoint, _at_onOpen, _at_onMessage) {
      this.endpoint = _at_endpoint;
      this.onOpen = _at_onOpen;
      this.onMessage = _at_onMessage;
      this.restart = __bind(this.restart, this);
      this.onCloseOrError = __bind(this.onCloseOrError, this);
      this.ensureOpen = __bind(this.ensureOpen, this);
      this.start();
    }

    RobustWebSocket.prototype.start = function() {
      this.socket = new WebSocket(this.endpoint);
      this.socket.on('open', (function(_this) {
        return function() {
          _this.onOpen(_this.socket);
          return _this.pingTimer = setInterval(function() {
            return _this.socket.ping();
          }, _this.pingInterval);
        };
      })(this));
      this.socket.on('message', (function(_this) {
        return function(data) {
          return _this.onMessage(data);
        };
      })(this));
      this.socket.on('close', this.onCloseOrError);
      this.socket.on('error', this.onCloseOrError);
      return setTimeout((function(_this) {
        return function() {
          return _this.ensureOpen();
        };
      })(this), 60000);
    };

    RobustWebSocket.prototype.ensureOpen = function() {
      if (this.socket.readyState !== WebSocket.OPEN) {
        return this.onCloseOrError("Did not manage to open after 60s");
      }
    };

    RobustWebSocket.prototype.onCloseOrError = function(error) {
      clearInterval(this.pingTimer);
      console.log("Socket closed or error encountered with " + this.endpoint + " at " + (new Date) + " (" + error + ")");
      console.log("Will restart socket in 60s...");
      return setTimeout((function(_this) {
        return function() {
          return _this.restart();
        };
      })(this), 60000);
    };

    RobustWebSocket.prototype.restart = function() {
      delete this.pingTimer;
      delete this.socket;
      return this.start();
    };

    return RobustWebSocket;

  })();

  module.exports = RobustWebSocket;

}).call(this);
